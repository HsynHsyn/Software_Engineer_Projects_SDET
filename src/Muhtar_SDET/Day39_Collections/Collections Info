Collections 09:30-
• Defines several classes and interfaces which can be used to represent
a group of objects as single entity
• Growable in nature, can increase or decrease the size
• Can hold different non-primitive data types
• Standard data structure and there are ready methods to use

Collection
• Collection interface is considered as root interface of collection framework
• Collection interface defines th  e most common methods which are applicable for any
collection object

Method Name Method Name         Method Name
size()        isEmpty()         add()
addAll()      remove()          removeAll()
removeIf()    contains()        containsAll()
retainAll()   clear()           toArray()

List Interface
• Child interface of Collection
• Duplicates are allowed
• Insertion order preserved (eklenme sirasi korunur)
• Has index numbers

ArrayList
• Implements the List interface
• Internally uses array
• Retrieving the element is faster
not; if you use add() and remove() like this, arraylist performance is getting slower
    when you are retrieving the element arraylist performance is getting faster

LinkedList Class
    • Implements the List interface
    • Internally uses doubly linked list (pointer previous and after element)
    • Each value will have pointer to the next value
    • Inserting and deleting the element is faster (pros)
    . retrieving the element slower than array (cons)
    . NODE base class

Vector Class
• Implements the List interface
• Internally uses array
• Is Synchronized (thread-safe) (pros)
. it is slower

Stack Class
• Child class of Vector (Synchronized)
• Is Synchronized (thread-safe)
• Last-in, first out order (LIFO)




Process
• Programs that are scheduled for execution in the CPU
• An instance of a program running on a computer.
• A process has code, data, heap and other segments

Thread
• A subset of a process
• A sequence of execution within a process
• Every single process at least have one thread
• Shares all the resources of process

Multi-threading
• Two or more threads are being executed within the process

Synchronized (Thread-safety)
• Process of controlling the access of multiple threads to any shared resource
• Only one thread to access the shared resource at a time (Thread-safety)

Set Interface
• Child interface of Collection
• *** Duplicates are not allowed
• Insertion order not preserved
• *** Does not have index

HashSet Class
• Implements the Set interface
• Maintains the random order
• Accepts null values

LinkedHashSet Class
• Child class of HashSet
• Maintains the insertion order
• Accepts null values

TreeSet Class
• Implements the SortedSet interface
• Maintains the sorted (Ascending) order
• Does not accept null values

---------------------------------------------------------------------------
Muhtar Class Notes

Collection (I): size is dynamic, supports non-primitives ONLY
		1. List (I): Has Index Number, Allows Duplicate
				1.1 ArrayList: Array based class
							   Accessing/searching the elements are faster
				1.2 LinkedList: Node based class (doubly linked list)
								Insertion & deletion of elements are faster
				1.3 Vector: Same as ArrayList but synchronized
							Is Synchronized ==> Thread-safety

				1.3.1 Stack: Same as ArrayList but synchronized
							Last-In-First-Out (LIFO) ===> pop()

		2. Set (I): Does not have index number, Does not allow duplcaites

				2.1 HashSet (C): Order is random, aceespts null

				2.1.1 LinkedHashSet (C): Keeps the insertion order, accepts null

				2.2 TreeSet (C): keeps the sorted order, does not accept null

		3. Queue (I)

Synchronized: multiple threads are being executed one thread at a time

			advantage: thread-safety
			disadvantage: slower

Process: execution instance of program application

Thread: A sequence of execution within a process

Creating custom Thread in java:
		1. by inheriting Thread Class
		2. by inheriting Runnable Interface

Multi-threading:
	Multiple thread objects are executed at the same time

Multitasking:
		two or more process are running

-----------------------------------------------------------------------------------------------
Day 40;

Queue Interface
• Child interface of Collection
• Duplicates are allowed
• Insertion order not preserved
• First-in, First out order (FIFO)

PriorityQueue Class
• Implements the Queue interface
• Maintains the random order
• Does not accept null values

ArrayDeque Class
• Implements the Deque interface
• Maintain the insertion order
• Accepts null values
-----------------------------------------------------------------------------------------------
    List                                 Set                              Queue
Duplicates are allowed          Duplicates are not allowed          Duplicates are allowed
Insertion order p reserved       Insertion order not preserved       Insertion order not preserved
Has index                       Does not have index                 Does not have index
-------------------------------------------------------------------------------------------------
When to use List, Set, and Queue?
• List: If we want to represent a group of individual objects as a single entity where
duplicates are allowed, and insertion order preserved
• Set: If we want to represent a group of individual objects as a single entity where
duplicates are NOT allowed, and insertion order NOT preserved
• Queue: If we want to represent a group of individual objects prior to processing

-------------------------------------------------------------------------------------------------
Iterable
• Parent interface of Collection interface
• Allows the object to be Iterated by using Iterator
• Iterator is used when we want to remove elements whilst you iterate over
a collection

How to use Iterator?
• We can obtain the Iterator by using the iterator() method of an Iterable
• Iterator provides the ready methods that can be used while traversing the collections:
• hasNext( ),   verifying there is a element
• next( ) ,     to get element
• remove( ),    remove element
