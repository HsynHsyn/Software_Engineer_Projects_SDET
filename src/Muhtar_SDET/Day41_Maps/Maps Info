Array vs Collection: both supports non primitives

		Array: Size is fixed
			   Supports both primitives & non-primitives
			   Can be mult-dimensional
			   Mutable
		   *** Faster than Collection (faster because you can reach arrays element randomly)

		Collection: Size is dynamic
					Supports non-primitives ONLY
					Can not be multi-dimensional
					Mutable
		        ***	Ready methods

Map (I): Collection of Pairs (key & value)
		 Supports non-primitives ONLY
		 Size is dynamic
		 Key MUST be unique, value can be duplicated


		1. HashMap (C): Random order
						Both key and value can be null


		2. LinkedHashMap (C): Insertion order
							  Both key and value can be null


		3. TreeMap (C): Sorted order
						Key can not be null, values can be null


		4. HashTable (C): Random order
						  Both key and value can NOT be null
						  Synchronized

Methods of Map:
		put(key, value): inserts the given key and value to the Map as a pair (entry)
							can also be used for updating the values of exsiting keys

		size(): returns the total number of pairs

		get(key): returns the value of the specified key

		replace(key, newValue): replaces the value of the specified key with the new value

		remove(key): removes the pair with the matching key from the map

		containsKey(key): returns true if the specified key is included in the map, otherwise returns false

		containsValue(Value): returns true if the specified Value is included in the map, otherwise returns false
------------------------------------------------------------------------------------------------
Map
• Data structure based on the key + value pairs
• Does not have IS A relation with Collection
• Size can be increased or decreased so Size is dynamic
• Key can not be duplicated, it is unique
. Just store the data
. Map is Interface
. KEYs serves like index number

HashMap Class
• Implements the Map interface
• Maintains the random order
• Accepts null value as a key

LinkedHashMap Class
• Child class of HashMap
• Maintains the insertion order
• Accepts null value as a key

TreeMap Class
• Implements the SortedMap Interface
• Maintains the sorted (Ascending) order
• Does not accept null as a key
. comperes the keys, belongs to ASCII table

Hashtable Class
• Implements the Map interface
• Maintains the random order
• Does not accept null as a key
• Synchronized (Thread-Safe)

             Methods Of Map
Method               Method      Method
---------------------------------------
put()                get()       size()
replace()            remove()    containsKey()
containsValue()      isEmpty()   equals()
clear()              putAll()    keySet()
values()             entrySet()  getKey()
getValue()           setValue()
----------------------------------------------------------------------------------------------------------












