Exception
• An unwanted or unexpected event
• Occurs during the compile time or during the runtime
• *** There are two categories of exceptions: checked exception and unchecked exception
• To prevent exceptions from crashing our program, we must write code that detects and handles them

Unchecked Exceptions
• Exceptions that are not checked at compile time
• *** Occurs during the runtime
• Code will compile even if we do not handle them
• *** They have IS A relationship with RuntimeException (parent class)

checked Exceptions
• Exceptions that are checked at compile time
• Occurs during the compile time
• Code will not compile even if we do not handle them
• *** They do not have IS A relationship with RuntimeException class
• *** They have IS A relationship with Exception (parent class)


*** Error can not be recoverable but exception can be recoverable
Errors
• Indicates that an illegal operation is being performed
• *** Occurs during the during the runtime only
• They can not be recovered, and not recommended to handle them

Try & Catch
• To handle an exception (checked or unchecked), we can use try & catch blocks

// Try-catch blokları, beklenmeyen hatalarla başa çıkmak, kritik işlemlerde hata yönetimini sağlamak,
kullanıcı deneyimini iyileştirmek ve hataları loglayarak programın güvenilirliğini artırmak için kullanılır.
Hataları bilerek yazmak yerine, try-catch kullanarak bu hataları yakalamak ve yönetmek en iyi uygulamadır.//

Exception Object

• When runtime exception happens, java will catch it and assigns to a variable in catch block
• After it is successfully caught, we can use the variable and call some methods on the
exception object
• Popular methods of exception objects are:
    • printStackTrace(): prints a stack trace (full details) of the exception
    • getMessage(): returns only brief description of the exception

-----------------important-------------------------------------------
*** usually not always Checked Exception is handled by try block
    Unchecked Exception is handled by catch block

Multiple catch Blocks
• If the code in the try block will be capable of throwing more than one type of exception
• To specify all the possible exceptions that could be thrown
• *** Parent exception class can not be placed before child exception class

Finally block
• An optional block that can be given after last catch block
• *** Always executed after try & catch blocks whether an exception occurs or not


final vs finalize vs finally:(interview quest)

	final: keyword ==> unchangeable

	finalize(): method ===> GC use it to collect the objects that are eligible for garbage collection

	finally: block ===> can only used with try&catch

--------------- summary-----------------------------------------------------------
Exceptions: unwanted/unexpected events

		Unchecked exceptions: occurs during the runtime

						All the RuneTimeExceptions are unchecked exception

						unknown
						if we do not know exception type we can use RunTimeException because RunTimeException is unchecked exception


		Checked exceptions: occurs during the compile time. must be handled right away

						All the non-RuntimeExceptions are checked exception

						known

Error vs Exceptions: Both are throwable, both can crash our program

		Exceptions: can occur during the compile time and runtime
					Occurs due to the issues within the program itself
					Recoverable, can be handled

		Error: Occurs during the runtime
			   Occurs due to the lack/limit of the system resources
			   Irrecoverable, not recommended to handle

Exception handling:

		1. try & catch blocks: used for handling any checked & unchecked exception

					try{
						exception codes
					}catch(ExceptionClass e){
						e.printStackTrace();
					}

				multiple catch blocks: parent exception type can never be placed before child exception type

				finally block: always get executed regardless of the exception is handled or not handled

								System.exit(1) // if you wan to exit finally will not execute

		2. *** throws keyword: used for handling checked exceptions ONLY

						caller of the method will be responsible for handling the exception

throw: used for manually throwing exception

		syntax:
			throw exceptionObject
***
Custom Exception:
	1. how to create custom unchecked exception?
			by inheriting from RuntimeException class

	2. how to create custom checked exception?
			by inheriting from Exception class

--------------- summary-----------------------------------------------------------
Throws Keyword
• Used within the method signature
• Informs the compiler that method throws one of the listed type exception
• Fastest way to get rid of the compilation error that’s caused by a checked exception
• throws keyword: used for handling checked exceptions ONLY
						caller of the method will be responsible for handling the exception
. *** throws is used for checked exceptions, it is temporary handling, just ignoring the problem
. if you will not use the method again throws keyword is best choose

Throws keyword - Rule
• Whoever calls the method that has throws keyword in its signature is responsible
to handle it or declare it again

Throw keyword
• Used for manually throwing an exception, you create exceptions
		syntax:
			throw exceptionObject

Custom Exception:
	1. how to create custom unchecked exception?
			by inheriting from RuntimeException class

	2. how to create custom checked exception?
			by inheriting from Exception class